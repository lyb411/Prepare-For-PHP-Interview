1.简单说下Apache中rewrite机制和PHP框架中URI路由机制

    1） URL重写，其实就是把用户通过浏览器请求的URL，到了后台，apache根据预先配置的重写规则将该请求指向真正的资源路径，说
    白了就是打马虎眼，把真正的路径改头换面后给用户访问，可问题是这样做有啥用处。
        1、SEO方面。将动态的URL静态化，以满足搜索引擎的胃口。
        2、访问控制。比如，通过重写规则后，客户端不易判断后台程序类型等。
        3、URL重定向。当网站更改域名或增加别名URL后，可以通过规则轻松的指向要访问的URL。

        mod_rewrite 使用基于正则表达式动态的修改传入请求的URL。它可以将URL映射到文件系统路径，也可以将一个URL映射到另一个URL。
    它使用了没有限制数量的规则来操纵URL，每条规则可以包括没有限制数量的附加条件。你可以通过多种方式来检测，如，服务器变量、
    环境变量、HTTP头、时间戳等。
        mod_rewrite 操作整个URL路径，包括path-info的部分。一个重写规则可以被设置在http.conf或者.htaccess中。一个重写规则
    生成的路径可以包括一个请求字符串，或者内部的子程序处理，外部请求的重定向，或者穿透内部代理等。

    2）PHP框架中的URI路由机制，与apache重写类似，一般包括通配符和正则两种规则。让用户可以重新定向(remap)URI处理程序.设定
    你自己的路由规则。


2.MySQL的索引机制，复合索引的使用原则
    （深入浅出MySQL一书中对索引的使用讲的比较细致）
    一般都会用书本中的目录来介绍索引机制，其实有些书本会有专门的快速检索附录，就很类似于数据库的索引。
    MySQL的索引包括4类：主键索引(primary key)、唯一索引(unique)、常规索引(index)、全文索引(fullindex)。
    Show index from table_name; --查看表中的索引
    Show status like 'Handler_read%'  --查看索引的使用情况

    复合索引，一般遵循最左前缀原则，如table_a 的 a b c 三列建复合索引
    create index ind_table_a on table_a(a,b,c);
    那么，只有在条件中用到a,或者a、b,或者a、b、c这样的情况下，才会用到刚建的复合索引。

3.MySQL的表类型及MyISAM与InnoDB的区别
    MySQL常见的表类型(即存储引擎)show engines包 括:MyISAM/Innodb/Memory/Merge/NDB
    其中，MyISAM和Innodb是最常用的两个表类型，各有优势，我们可以根据需求情况选择适合自己的表类型。
    [MyISAM]
        1）每个数据库存储包括3个文件：.frm(表定义)、MYD(数据文件)、MYI(索引文件)
        2）数据文件或索引文件可以指向多个磁盘
        3）Linux的默认引擎，win默认InnoDB
        4）面向非事务类型，避免事务型额外的开销
        5）适用于select、insert密集的表
        6）MyISAM默认锁的调度机制是写优先，可以通过LOW_PRIORITY_UPDATES设置
        7）MyISAM类型的数据文件可以在不同操作系统中COPY，这点很重要，布署的时候方便点。

    [Innodb]
        1）用于事务应用程序
        2）适用于update、delete密集的操作。执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，
           但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含 where条件时，两种表的操作是一样的。
           DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。
        3）引入行级锁和外键的约束
        4）InnoDB不支持FULLTEXT类型的索引


4.简单说下快速排序算法
    基本思想：通过一趟排序将待排序列分割成两部分，其中一部分比另一部分记录小，再分别对这两部分继续快速排序，以达到有序。
    算法实现：设有两个指针low和high，初值为low=1，high=n，设基准值为key(通常选第一个)，则首先从high位置开始向前搜索，
     找到第一个比key小的记录与key交换，然后从low位置向后搜索，找到第一个比key大的记录与基准值交换，重复直至low=high为止。
    第一趟排序结果，key之前的记录值比key之后的记录值小。
        11 25 9  3  16 2   //选择11为key
        2  25 9  3  16 11
        2  11 9  3  16 25
        2  3  9  11 16 25

5.Memcached、redis的使用和理解
    Memcached和redis 都是一个key-value的内存式存储系统，通过hash表来存储检索结果，做到强大的缓存机制。
    下面是从百科中摘录的介绍。具体实践和使用后续再详细介绍。
        Memcache是一个高性能的分布式的内存对象缓存系统，通过在内存里维护一个统一的巨大的hash表，它能够用来存储各种格式的数据
    ，包括图像、视频、文件以及数据库检索的结果等。简单的说就是将数据调用到内存中，然后从内存中读取，从而大大提高读取速度。
        redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、
    set(集合)和zset(有序集合)。

6.strlen()与mb_strlen的作用分别是什么
        PHP内置的字符串长度函数strlen无法正确处理中文字符串，它得 到的只是字符串所占的字节数。对于GB2312的中文编码，strl
    en得到的值是汉字个数的2倍，而对于UTF-8编码的中文，就是3倍的差异了（在 UTF-8编码下，一个汉字占3个字节）。
        采用mb_strlen函数可以较好地解决这个问题。mb_strlen的用法和 strlen类似，只不过它有第二个可选参数用于指定字符编码。
    例如得到UTF-8的字符串$str长度，可以用 mb_strlen($str,'UTF-8')。如果省略第二个参数，则会使用PHP的内部编码。内部编码可
    以通过 mb_internal_encoding()函数得到。
        需要注意的是，mb_strlen并不是PHP核心函数，使用前需要确保在php.ini中加载了php_mbstring.dll，即确保“extension=php
    _mbstring.dll”这一行存在并且没有被注释掉，否则会出现未定义函 数的问题。

7.中文字符串的截取有时会出现乱码，如何解决
    使用mbstring扩展库的mb_substr()截取就不会出现乱码了。
        但是中英文混合的还是会出现问题，例如我要显示一个小图片的简要信息，5 个中文正好，超过 5 个就截取前4再加上 ”…”，
    这样处理中文是没问题了，可是处理英文或数字，这样截取就太短了。还是自己书写截取函数，但效率不如用mbstring扩展库来得高。

8.写出php的public、protected、private三种访问控制模式的区别
    public: 公有类型
            在子类中可以通过 self::属性名(或方法名) 调用public方法或属性, parent::方法名 调用父类方法
    　　　　在实例中可以能过 $obj->属性名(或方法名) 来调用public类型的方法或属性

    protected: 受保护类型
            在子类中可以通过 self::属性名(或方法名) 调用protected方法或属性, parent::属性名(或方法名) 调用父类方法。
            在实例中不能通过 $obj->属性名(或方法名) 来调用protected类型的方法或属性

    private: 私有类型
             该类型的属性或方法只能在该类中使用，
             在该类的实例、子类中、子类的实例中都不能调用私有类型的属性和方法

    self和parent 的区别
      a).在子类中常用到这两个对象。他们的主要区别在于self可以调用父类中的公有或受保护的属性，但parent不可以调用
      b).self:: 它表示当前类的静态成员(方法和属性)与$this不同,$this是指当前对像

9.简单描述mysql中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响
    Mysql索引概念：
        说说Mysql索引，看到一个很少比如：索引就好比一本书的目录，它会让你更快的找到内容，显然目录（索引）并不是越多越好，
    假如这本书1000页，有500也是目录，它当然效率低，目录是要占纸张的,而索引是要占磁盘空间的。

    Mysql索引主要有两种结构：B+树和hash.

    hash:hsah索引在mysql比较少用,他以把数据的索引以hash形式组织起来,因此当查找某一条记录的时候,速度非常快.但是因为是hash
    结构,每个键只对应一个值,而且是散列的方式分布.所以他并不支持范围查找和排序等功能.

    B+树:b+tree是mysql使用最频繁的一个索引数据结构,数据结构以平衡树的形式来组织,因为是树型结构,所以更适合用来处理排序,范
    围查找等功能.相对hash索引,B+树在查找单条记录的速度虽然比不上hash索引,但是因为更适合排序等操作,所以他更受用户的欢迎.
    毕竟不可能只对数据库进行单条记录的操作.

    Mysql常见索引有：主键索引、唯一索引、普通索引、全文索引、组合索引

    PRIMARY KEY（主键索引）  ALTER TABLE `table_name` ADD PRIMARY KEY ( `column` )
    UNIQUE(唯一索引)     ALTER TABLE `table_name` ADD UNIQUE (`column`)
    INDEX(普通索引)     ALTER TABLE `table_name` ADD INDEX index_name ( `column` )
    FULLTEXT(全文索引)      ALTER TABLE `table_name` ADD FULLTEXT ( `column` )
    组合索引   ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )

    Mysql各种索引区别：
    普通索引：最基本的索引，没有任何限制
    唯一索引：与"普通索引"类似，不同的就是：索引列的值必须唯一，但允许有空值。
    主键索引：它是一种特殊的唯一索引，不允许有空值。
    全文索引：仅可用于MyISAM 表，针对较大的数据，生成全文索引很耗时耗空间。
    组合索引：为了更多的提高mysql效率可建立组合索引，遵循"最左前缀"原则。

10.PHP写个函数来解决多线程同时读写一个文件的问题
    用PHP的flock在写文件前先锁上，等写完后解锁，这样就实现了多线程同时读写一个文件避免冲突。大概就是下面这个流程
    /*
    *flock(file,lock,block)
    *file 必需，规定要锁定或释放的已打开的文件
    *lock 必需。规定要使用哪种锁定类型。
    *block 可选。若设置为 1 或 true，则当进行锁定时阻挡其他进程。
    *lock
    *LOCK_SH 要取得共享锁定（读取的程序）
    *LOCK_EX 要取得独占锁定（写入的程序）
    *LOCK_UN 要释放锁定（无论共享或独占）
    *LOCK_NB 如果不希望 flock() 在锁定时堵塞
    */
    $file = fopen("/tmp/lock.txt", "w+");
    if (flock($file,LOCK_EX))
    {
        fwrite($file,'write more words');
        flock($file,LOCK_UN);
    }
    else
    {
        //处理错误逻辑
    }
    fclose($file);
        但在PHP中，flock似乎工作的不是那么好！在多并发情况下，似乎是经常独占资源，不即时释放，或者是根本不释放，造成死锁，
    从而使服务器的cpu占用很高，甚至有时候会让服务器彻底死掉。好像在很多linux/unix系统中，都会有这样的情况发生。所以使用
    flock之前，一定要慎重考虑。
    解决方案:
    方案一：对文件进行加锁时，设置一个超时时间。
    方案二：不使用flock函数，借用临时文件来解决读写冲突的问题。
    方案三：对操作的文件进行随机读写，以降低并发的可能性。
    方案四：将所有要操作的进程放入一个队列中。

